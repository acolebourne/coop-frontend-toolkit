/*==============================================================
Typography amd Vertical Rhythm mixins - Co-op Front-end Toolkit
===============================================================*/

/*

The typographic scale can be customised by overriding the default variable.
To do so, set a new $typographic-scale variable with at least a base property
containing all the default sizes. You can also pass optional extra breakpoints
containing the sizes you want to modify as the screens get bigger.

The typographic scale and vertical rhythm of all elements across all devices
can be controlled using this variable. This means that by setting a scale and
$base-spacing-unit you can maintain vertical rhythm by using our helper mixin.
For instance by using @include spacing('margin', 'bottom', 'base') will set a
margin-bottom to the element. 'Base', refers to the $base-spacing-unit set in
the scale variable. At each break point the margin-bottom will be changed to
reflect the value set. In this case the base (mobile) margin bottom will be
32px and above the medium break point will be 64px.

The mixin also allows you to pass other values that also fit to the scale (as
they are derived by dividing the $base-spacing-unit by half each time).
Therefore @include spacing('margin', 'bottom', 'quarter') would produce a
margin-bottom: 16px above the medium breakpoint (in this example) and
margin-bottom: 8px on mobile (or base break point).

*/

@import "../functions";
@import "helpers";

@mixin font-size($element: 'body', $line-height: $base-line-height) {
  font-size: em-calc(map-deep-get($typographic-scale, "base", $element));
  font-family: $bold;

  @if $line-height != $base-line-height {
    line-height: $line-height;
  }

  @each $screen-size in map-keys($typographic-scale) {
    @if $screen-size != 'base' {
      @if map-deep-get($typographic-scale, $screen-size, $element) {
        @include media($screen-size) {
          font-size: em-calc(map-deep-get($typographic-scale, $screen-size, $element));
        }
      }
    }
  }
}

@mixin line-height($line-height: 'base-line-height')  {
  line-height: (map-deep-get($typographic-scale, "base", $line-height));

  @each $screen-size in map-keys($typographic-scale) {
    @if $screen-size != 'base' {
      @if map-deep-get($typographic-scale, $screen-size, $line-height) {
        @include media($screen-size) {
          line-height: (map-deep-get($typographic-scale, $screen-size, $line-height));
        }
      }
    }
  }
}

$spacing-type: 'margin', 'padding';
$spacing-direction: 'top', 'left', 'bottom', 'right', 'all';
$spacing-rhythm: 'base', 'half', 'quarter', 'eighth', 'sixteenth';

@mixin spacing($spacing-type, $spacing-direction, $spacing-rhythm, $spacing-unit: 'base-spacing-unit', $hyphen: '-' ) {

  @if $spacing-rhythm == 'base' {
    @if $spacing-direction == 'all' {
      #{$spacing-type}: (map-deep-get($typographic-scale, 'base', $spacing-unit));
    }
    @else {
      #{$spacing-type}#{$hyphen}#{$spacing-direction}: (map-deep-get($typographic-scale, 'base', $spacing-unit));
    }
  }
  @if $spacing-rhythm == 'half' {
      @if $spacing-direction == 'all' {
        #{$spacing-type}: ((map-deep-get($typographic-scale, 'base', $spacing-unit)) / 2);
      }
      @else {
        #{$spacing-type}#{$hyphen}#{$spacing-direction}: ((map-deep-get($typographic-scale, 'base', $spacing-unit)) / 2);
      }
  }
  @if $spacing-rhythm == 'quarter' {
      @if $spacing-direction == 'all' {
        #{$spacing-type}: ((map-deep-get($typographic-scale, 'base', $spacing-unit)) / 4);
      }
      @else {
        #{$spacing-type}#{$hyphen}#{$spacing-direction}: ((map-deep-get($typographic-scale, 'base', $spacing-unit)) / 4);
      }
  }
  @if $spacing-rhythm == 'eighth' {
      @if $spacing-direction == 'all' {
        #{$spacing-type}: ((map-deep-get($typographic-scale, 'base', $spacing-unit)) / 8);
      }
      @else {
        #{$spacing-type}#{$hyphen}#{$spacing-direction}: ((map-deep-get($typographic-scale, 'base', $spacing-unit)) / 8);
      }
  }
  @if $spacing-rhythm == 'sixteenth' {
      @if $spacing-direction == 'all' {
        #{$spacing-type}: ((map-deep-get($typographic-scale, 'base', $spacing-unit)) / 16);
      }
      @else {
        #{$spacing-type}#{$hyphen}#{$spacing-direction}: ((map-deep-get($typographic-scale, 'base', $spacing-unit)) / 16);
      }
  }

  @each $screen-size in map-keys($typographic-scale) {
    @if $screen-size != 'base' {
      @if map-deep-get($typographic-scale, $screen-size, $spacing-unit) {
        @include media($screen-size) {
          @if $spacing-rhythm == 'base' {
            @if $spacing-direction == 'all' {
              #{$spacing-type}: (map-deep-get($typographic-scale, 'base', $spacing-unit));
            }
            @else {
              #{$spacing-type}#{$hyphen}#{$spacing-direction}: (map-deep-get($typographic-scale, $screen-size, $spacing-unit));
            }
          }
          @if $spacing-rhythm == 'half' {
            @if $spacing-direction == 'all' {
              #{$spacing-type}: ((map-deep-get($typographic-scale, $screen-size, $spacing-unit)) / 2);
            }
            @else {
              #{$spacing-type}#{$hyphen}#{$spacing-direction}: ((map-deep-get($typographic-scale, $screen-size, $spacing-unit)) / 2);
            }
          }
          @if $spacing-rhythm == 'quarter' {
            @if $spacing-direction == 'all' {
              #{$spacing-type}: ((map-deep-get($typographic-scale, 'base', $spacing-unit)) / 4);
            }
            @else {
              #{$spacing-type}#{$hyphen}#{$spacing-direction}: ((map-deep-get($typographic-scale, $screen-size, $spacing-unit)) / 4);
            }
          }
          @if $spacing-rhythm == 'eighth' {
            @if $spacing-direction == 'all' {
              #{$spacing-type}: ((map-deep-get($typographic-scale, 'base', $spacing-unit)) / 8);
            }
            @else {
              #{$spacing-type}#{$hyphen}#{$spacing-direction}: ((map-deep-get($typographic-scale, $screen-size, $spacing-unit)) / 8);
            }
          }
          @if $spacing-rhythm == 'sixteenth' {
            @if $spacing-direction == 'all' {
              #{$spacing-type}: ((map-deep-get($typographic-scale, 'base', $spacing-unit)) / 16);
            }
            @else {
              #{$spacing-type}#{$hyphen}#{$spacing-direction}: ((map-deep-get($typographic-scale, $screen-size, $spacing-unit)) / 16);
            }
          }
        }
      }
    }
  }
}

@mixin body {
  @include font-size('body');
}

// Headings
@mixin heading-mega {
  @include font-size('h-mega', 1.22);
  @include spacing('margin', 'bottom', 'half');
  @include spacing('padding', 'top', 'half');
}

@mixin heading-h1 {
  @include font-size('h1', 1.4);
  @include spacing('margin', 'bottom', 'half');
}

@mixin heading-h2 {
  @include font-size('h2', 1.5);
  @include spacing('padding', 'top', 'half');
  @include spacing('margin', 'bottom', 'eighth');
}

@mixin heading-h3 {
  @include font-size('h3', 1.5);
  @include spacing('padding', 'top', 'eighth');
  @include spacing('margin', 'bottom', 'eighth');
}

@mixin heading-h4 {
  @include font-size('h4', 1.5);
  @include spacing('padding', 'top', 'eighth');
  @include spacing('margin', 'bottom', 'eighth');
}

@mixin heading-h5 {
  @include font-size('h5', 1.5);
  @include spacing('padding', 'top', 'eighth');
  @include spacing('margin', 'bottom', 'eighth');
}

@mixin heading-h6 {
  @include font-size('h6', 1.2);
  @include spacing('padding', 'top', 'quarter');
  @include spacing('margin', 'bottom', 'sixteenth');
}

@mixin intro-text {
  @include font-size('lead', 1.6);
  @include spacing('margin', 'bottom', 'eighth');
  font-family: $regular;
}

@mixin small {
  @include font-size('small', 1.25);
  @include spacing('padding', 'top', 'quarter');
  @include spacing('margin', 'bottom', 'sixteenth');
  font-family: $regular;
}


// Other typographic elements
@mixin blockquote {
  @include font-size('blockquote');
  @include spacing('margin', 'bottom', 'half');
  @include spacing('padding', 'all', 'half');
  margin-left: 0;
  margin-right: 0;
  background-color: $offwhite;
  font-family: $regular;

  p {
    margin-bottom: 0;
  }

  cite {
    @include spacing('margin', 'top', 'quarter');
  }

}

@mixin cite {
  display: block;
  font-family: $regular;
  font-size: 0.75em;

  &:before {
    content: '';
  }
}

// Text styles
@mixin regular {
  font-family: $regular;
}

@mixin regular-italic {
  font-family: $regular-italic;
}

@mixin medium {
  font-family: $medium;
}

@mixin bold {
  font-family: $bold;
}

@mixin bold-italic {
  font-family: $bold-italic;
}

@mixin line-through {
  text-decoration: line-through;
}
